<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OGNL</name>
    </assembly>
    <members>
        <member name="T:ognl.ObjectMethodAccessor">
             <summary>
            Implementation of PropertyAccessor that uses reflection on the target object's class to
            find a field or a pair of set/get methods with the given property name.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="T:ognl.MethodAccessor">
            <summary>
            This interface defines methods for callinig methods in a target object.
            Methods are broken up into static and instance methods for convenience.
            indexes into the target object, which must be an array.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="M:ognl.MethodAccessor.callStaticMethod(System.Collections.IDictionary,System.Type,System.String,System.Object[])">
            <summary>
             Calls the static method named with the arguments given on the class given.
             </summary>
             <param name="context">expression context in which the method should be called</param>
             <param name="targetClass">the object in which the method exists</param> 
             <param name="methodName">  the name of the method</param>
             <param name="args">        the arguments to the method</param>
             <returns>result of calling the method</returns>                                             
             <exception href="MethodFailedException"> if there is an error calling the method</exception>  
             
        </member>
        <member name="M:ognl.MethodAccessor.callMethod(System.Collections.IDictionary,System.Object,System.String,System.Object[])">
            <summary>
             Calls the method named with the arguments given.
             </summary> 
             <param name="context">expression context in which the method should be called</param>
             <param name="target">the object in which the method exists</param>
             <param name="methodName">the name of the method</param>
             <param name="args">the arguments to the method</param>
             <returns>result of calling the method</returns>
             <exception href="MethodFailedException"> if there is an error calling the method</exception>
             
        </member>
        <member name="T:ognl.ASTVarRef">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.SimpleNode">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.Node">
               JJTree interface for AST nodes, as modified to handle the OGNL operations getValue and
               setValue.  JJTree's original comment:
            
               All AST nodes must implement this interface.  It provides basic
               machinery for constructing the parent and child relationships
               between nodes.
            
               @author Luke Blanshard (blanshlu@netscape.net)
               @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="M:ognl.Node.jjtOpen">
            This method is called after the node has been made the current
                    node.  It indicates that child nodes can now be added to it. 
        </member>
        <member name="M:ognl.Node.jjtClose">
            This method is called after all the child nodes have been
                    added. 
        </member>
        <member name="M:ognl.Node.jjtSetParent(ognl.Node)">
            This pair of methods are used to inform the node of its
                    parent. 
        </member>
        <member name="M:ognl.Node.jjtAddChild(ognl.Node,System.Int32)">
            This method tells the node to add its argument to the node's
                    list of children.  
        </member>
        <member name="M:ognl.Node.jjtGetChild(System.Int32)">
            This method returns a child node.  The children are numbered
                    from zero, left to right. 
        </member>
        <member name="M:ognl.Node.jjtGetNumChildren">
            Return the number of children the node has. 
        </member>
        <member name="M:ognl.Node.getValue(ognl.OgnlContext,System.Object)">
            Extracts the value from the given source object that is appropriate for this node
            within the given context.
        </member>
        <member name="M:ognl.Node.setValue(ognl.OgnlContext,System.Object,System.Object)">
            Sets the given value in the given target as appropriate for this node within the
            given context.
        </member>
        <member name="M:ognl.SimpleNode.getValueBody(ognl.OgnlContext,System.Object)">
            Subclasses implement this method to do the actual work of extracting the
                      appropriate value from the source object. 
        </member>
        <member name="M:ognl.SimpleNode.setValueBody(ognl.OgnlContext,System.Object,System.Object)">
            Subclasses implement this method to do the actual work of setting the
                    appropriate value in the target object.  The default implementation
                    // throws an <code>InappropriateExpressionException</code>, meaning that it
                    cannot be a set expression.
        </member>
        <member name="M:ognl.SimpleNode.isNodeConstant(ognl.OgnlContext)">
                    Returns true iff this node is constant without respect to the children.
        </member>
        <member name="M:ognl.SimpleNode.flattenTree">
            This method may be called from subclasses' jjtClose methods.  It flattens the
                      tree under this node by eliminating any children that are of the same class as
                      this node and copying their children to this node. 
        </member>
        <member name="T:ognl.ASTProject">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTNot">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ExpressionNode">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="M:ognl.ExpressionNode.isNodeConstant(ognl.OgnlContext)">
                    Returns true iff this node is constant without respect to the children.
        </member>
        <member name="T:ognl.ASTList">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTKeyValue">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="M:ognl.ASTKeyValue.getValueBody(ognl.OgnlContext,System.Object)">
                    Returns null because this is a parser construct and does not evaluate
        </member>
        <member name="T:ognl.EnumerationElementsAccessor">
            <summary>
            Implementation of the IElementsAccessor interface for Enumerators, which returns an
            iterator that passes its calls through to the target IEnumerator.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="T:ognl.IElementsAccessor">
            <summary>
            This interface defines a method for getting the "elements" of an object, which means
            any objects that naturally would be considered to be contained by the object.  So for a
            collection, you would expect this method to return all the objects in that collection;
            while for an ordinary object you would expect this method to return just that object.
            </summary>
            <remarks>
            An implementation of this interface will often require that its target objects all
            be of some particular type. 
            <para>For example, the <see href="MapElementsAccessor"/> class requires that
            its targets all implement the <see href="IDictionary"/> interface.</para>
            </remarks>																																																							* @author Luke Blanshard (blanshlu@netscape.net)
            author: Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="M:ognl.IElementsAccessor.getElements(System.Object)">
            <summary> 	
            Returns an iterator over the elements of the given target object.
            </summary>
             <param name="target">the object to get the elements of</param>
            <returns>an iterator over the elements of the given object</returns>
            <exception cref="T:ognl.OgnlException">if there is an error getting the given object's elements</exception>
            
        </member>
        <member name="M:ognl.EnumerationElementsAccessor.getElements(System.Object)">
            <summary>
            Just cast as an IEnumerator.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:ognl.NoSuchPropertyException">
            <summary>
            Exception thrown if a property is attempted to be extracted from an object that does
            not have such a property.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="T:ognl.OgnlException">
            <summary>
            Superclass for OGNL exceptions, incorporating an optional encapsulated exception.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="F:ognl.OgnlException.evaluation">
            
            The root evaluation of the expression when the exception was thrown
            
        </member>
        <member name="M:ognl.OgnlException.#ctor">
            <summary>
            Constructs an OgnlException with no message or encapsulated exception.
            </summary>
        </member>
        <member name="M:ognl.OgnlException.#ctor(System.String)">
            <summary>
            Constructs an OgnlException with the given message but no encapsulated exception.
            </summary>
            <param name="msg">the exception's detail message</param>
            
        </member>
        <member name="M:ognl.OgnlException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an OgnlException with the given message and encapsulated exception.
            </summary>
            <param name="msg"> the exception's detail message</param>    
            <param name="reason">the encapsulated exception</param>  
            
        </member>
        <member name="M:ognl.OgnlException.getReason">
            
            Returns the encapsulated exception, or null if there is none.
            @return the encapsulated exception
            
        </member>
        <member name="M:ognl.OgnlException.getEvaluation">
             <summary>
             Returns the Evaluation that was the root evaluation when the exception was
             thrown.
            </summary>
        </member>
        <member name="M:ognl.OgnlException.setEvaluation(ognl.Evaluation)">
            <summary>
             Sets the Evaluation that was current when this exception was thrown.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ognl.OgnlException.ToString" -->
        <member name="T:ognl.ASTAdd">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:java.BeanPropertyDescriptor">
            <summary>
            BeanPropertyDescriptor µÄÕªÒªËµÃ÷¡£
            </summary>
        </member>
        <member name="T:java.PropertyDescriptor">
            <summary>
            PropertyDescriptor µÄÕªÒªËµÃ÷¡£
            </summary>
        </member>
        <member name="T:ognl.DynamicSubscript">
             <summary>
            This class has predefined instances that stand for OGNL's special "dynamic subscripts"
            for getting at the first, middle, or last elements of a list.  
            </summary>
            <remarks>In OGNL expressions,
            these subscripts look like special kinds of array indexes: 
            <list type="">
            <item><term>[^]</term><description>means the first element</description></item>
            <item><term>[$]</term><description>means the last</description></item>
            <item><term>[|]</term><description>means the middle</description></item>
            <item><term>[*]</term><description>means the whole list</description></item>
            </list>
            </remarks>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="F:ognl.DynamicSubscript.FIRST">
            <summary>
            First element: ^.
            </summary>
        </member>
        <member name="F:ognl.DynamicSubscript.MID">
            <summary>
            Middle element: |.
            </summary>
        </member>
        <member name="F:ognl.DynamicSubscript.LAST">
            <summary>
            Last element: $.
            </summary>
        </member>
        <member name="F:ognl.DynamicSubscript.ALL">
            <summary>
            All Element: *.
            </summary>
        </member>
        <member name="M:ognl.DynamicSubscript.getFlag">
            <summary>
            Gets  dynamic subscript flag.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ognl.ObjectNullHandler">
             <summary>
            Implementation of NullHandler that returns null in all cases,
            so that NullPointerException will be thrown by the caller.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="T:ognl.NullHandler">
            <summary>
            Interface for handling null results from Chains.
            object has the opportunity to substitute an object for the
            null and continue.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="M:ognl.NullHandler.nullMethodResult(System.Collections.IDictionary,System.Object,System.String,System.Object[])">
            <summary>
            Method called on target returned null.
            </summary>
        </member>
        <member name="M:ognl.NullHandler.nullPropertyValue(System.Collections.IDictionary,System.Object,System.Object)">
            <summary>
            Property in target evaluated to null.  Property can be a constant
            string property name or a DynamicSubscript.
            </summary>
        </member>
        <member name="T:ognl.ListPropertyAccessor">
            <summary>
            Implementation of PropertyAccessor that uses numbers and dynamic subscripts as
            properties to index into Lists.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ObjectPropertyAccessor">
             <summary>
            Implementation of PropertyAccessor that uses reflection on the target object's class to
            find a field or a pair of set/get methods with the given property name.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="T:ognl.PropertyAccessor">
            <summary>
            This interface defines methods for setting and getting a property from a target object.
            A "property" in this case is a named data value that takes the generic form of an
            object---the same definition as is used by beans.  But the operational semantics of the
            term will vary by implementation of this interface: a bean-style implementation will
            get and set properties as beans do, by reflection on the target object's class, but
            other implementations are possible, such as one that uses the property name as a key
            into a map.
            </summary>
            <remarks>
             An implementation of this interface will often require that its target objects all
            be of some particular type.  For example, the MapPropertyAccessor class requires that
            its targets all implement the java.util.IDictionary interface.
            
            <para> Note that the "name" of a property is represented by a generic object.  Some
            implementations may require properties' names to be Strings, while others may allow
            them to be other types---for example, ArrayPropertyAccessor treats Number names as
            indexes into the target object, which must be an array.</para>
            </remarks>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="M:ognl.PropertyAccessor.getProperty(System.Collections.IDictionary,System.Object,System.Object)">
            <summary>
            Extracts and returns the property of the given name from the given target object.
            </summary>
            @param target  the object to get the property from
            @param name    the name of the property to get
            @return        the current value of the given property in the given object
            @exception OgnlException if there is an error locating the property in the given object
            
        </member>
        <member name="M:ognl.PropertyAccessor.setProperty(System.Collections.IDictionary,System.Object,System.Object,System.Object)">
            <summary>
            Sets the value of the property of the given name in the given target object.
            </summary>
            @param target  the object to set the property in
            @param name    the name of the property to set
            @param value   the new value for the property
            @exception OgnlException if there is an error setting the property in the given object
            
        </member>
        <member name="M:ognl.ObjectPropertyAccessor.getPossibleProperty(System.Collections.IDictionary,System.Object,System.String)">
            <summary>
             Returns OgnlRuntime.NotFound if the property does not exist.
            </summary>
        </member>
        <member name="M:ognl.ObjectPropertyAccessor.setPossibleProperty(System.Collections.IDictionary,System.Object,System.String,System.Object)">
            <summary>
             Returns OgnlRuntime.NotFound if the property does not exist.
            </summary>
        </member>
        <member name="T:ognl.OgnlParser">
            OgnlParser is a JavaCC parser class; it translates OGNL expressions into abstract
            syntax trees (ASTs) that can then be interpreted by the getValue and setValue methods.
        </member>
        <member name="M:ognl.OgnlParser.topLevelExpression">
            This is the top-level construct of OGNL.
        </member>
        <member name="M:ognl.OgnlParser.projection">
            Apply an expression to all elements of a collection, creating a new collection
            as the result.
        </member>
        <member name="M:ognl.OgnlParser.selectAll">
            Apply a bool expression to all elements of a collection, creating a new collection
            containing those elements for which the expression returned true.
        </member>
        <member name="M:ognl.OgnlParser.selectFirst">
            Apply a bool expression to all elements of a collection, creating a new collection
            containing those elements for the first element for which the expression returned true.
        </member>
        <member name="M:ognl.OgnlParser.selectLast">
            Apply a bool expression to all elements of a collection, creating a new collection
            containing those elements for the first element for which the expression returned true.
        </member>
        <member name="T:ognl.ASTUnsignedShiftRight">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTSelectFirst">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.Evaluation">
            <summary>
             An <b>Evaluation</b> is and object that holds a node being evaluated
             and the source from which that node will take extract its
             value.  
             </summary>
             <remarks>It refers to child evaluations that occur as
             a result of the nodes' evaluation.
             </remarks>
            
        </member>
        <member name="M:ognl.Evaluation.#ctor(ognl.SimpleNode,System.Object)">
             <summary>
             Constructs a new "get" <code>Evaluation</code> from the node and source given.
            </summary> 
        </member>
        <member name="M:ognl.Evaluation.#ctor(ognl.SimpleNode,System.Object,System.Boolean)">
            <summary> 
             Constructs a new <code>Evaluation</code> from the node and source given.
             If <code>setOperation</code> is true this <code>Evaluation</code> represents
             a "set" as opposed to a "get".
             </summary>
        </member>
        <member name="M:ognl.Evaluation.getNode">
            <summary> 
             Returns the <code>SimpleNode</code> for this <code>Evaluation</code>
            </summary>
        </member>
        <member name="M:ognl.Evaluation.setNode(ognl.SimpleNode)">
            <summary> 
             Sets the node of the evaluation.  Normally applications do not need to
             set this.  Notable exceptions to this rule are custom evaluators that
             choose between navigable objects (as in a multi-root evaluator where
             the navigable node is chosen at runtime).
            </summary>
        </member>
        <member name="M:ognl.Evaluation.getSource">
            <summary> 
             Returns the source object on which this Evaluation operated.
            </summary>
        </member>
        <member name="M:ognl.Evaluation.setSource(System.Object)">
            <summary> 
             Sets the source of the evaluation.  Normally applications do not need to
             set this.  Notable exceptions to this rule are custom evaluators that
             choose between navigable objects (as in a multi-root evaluator where
             the navigable node is chosen at runtime).
            </summary>
        </member>
        <member name="M:ognl.Evaluation.isSetOperation">
            <summary> 
             Returns true if this Evaluation represents a set operation.
            </summary>
        </member>
        <member name="M:ognl.Evaluation.setSetOperation(System.Boolean)">
            <summary> 
             Marks the Evaluation as a set operation if the value is true, else
             marks it as a get operation.
            </summary>
        </member>
        <member name="M:ognl.Evaluation.getResult">
            <summary> 
             Returns the result of the Evaluation, or null if it was a set operation.
            </summary>
        </member>
        <member name="M:ognl.Evaluation.setResult(System.Object)">
            <summary> 
             Sets the result of the Evaluation.  This method is normally only used
             interally and should not be set without knowledge of what you are doing.
            </summary>
        </member>
        <member name="M:ognl.Evaluation.getException">
            <summary> 
             Returns the exception that occurred as a result of evaluating the
             Evaluation, or null if no exception occurred.
            </summary>
        </member>
        <member name="M:ognl.Evaluation.setException(System.Exception)">
            <summary> 
             Sets the exception that occurred as a result of evaluating the
             Evaluation.  This method is normally only used interally and
             should not be set without knowledge of what you are doing.
            </summary>
        </member>
        <member name="M:ognl.Evaluation.getParent">
            <summary> 
             Returns the parent evaluation of this evaluation.  If this returns
             null then it is is the root evaluation of a tree.
            </summary>
        </member>
        <member name="M:ognl.Evaluation.getNext">
            <summary> 
             Returns the next sibling of this evaluation.  Returns null if
             this is the last in a chain of evaluations.
            </summary>
        </member>
        <member name="M:ognl.Evaluation.getPrevious">
            <summary> 
             Returns the previous sibling of this evaluation.  Returns null if
             this is the first in a chain of evaluations.
            </summary>
        </member>
        <member name="M:ognl.Evaluation.getFirstChild">
            <summary> 
             Returns the first child of this evaluation.  Returns null if
             there are no children.
            </summary>
        </member>
        <member name="M:ognl.Evaluation.getLastChild">
            <summary> 
             Returns the last child of this evaluation.  Returns null if
             there are no children.
            </summary>
        </member>
        <member name="M:ognl.Evaluation.getFirstDescendant">
            <summary> 
             Gets the first descendent.  In any Evaluation tree this will the
             Evaluation that was first executed.
            </summary>
        </member>
        <member name="M:ognl.Evaluation.getLastDescendant">
            <summary> 
             Gets the last descendent.  In any Evaluation tree this will the
             Evaluation that was most recently executing.
            </summary>
        </member>
        <member name="M:ognl.Evaluation.addChild(ognl.Evaluation)">
            <summary> 
             Adds a child to the list of children of this evaluation.  The
             parent of the child is set to the receiver and the children
             references are modified in the receiver to reflect the new child.
             The lastChild of the receiver is set to the child, and the
             firstChild is set also if child is the first (or only) child.
            </summary>
        </member>
        <member name="M:ognl.Evaluation.init(ognl.SimpleNode,System.Object,System.Boolean)">
            <summary> 
             Reinitializes this Evaluation to the parameters specified.
            </summary>
        </member>
        <member name="M:ognl.Evaluation.reset">
            <summary> 
             Resets this Evaluation to the initial state.
            </summary>
        </member>
        <member name="M:ognl.Evaluation.ToString(System.Boolean,System.Boolean,System.String)">
            <summary> 
             Produces a string value for the Evaluation.  If compact is
             true then a more compact form of the description only including
             the node type and unique identifier is shown, else a full
             description including source and result are shown.  If showChildren
             is true the child evaluations are printed using the depth string
             given as a prefix.
            </summary>
        </member>
        <member name="M:ognl.Evaluation.ToString(System.Boolean,System.String)">
            <summary> 
             Produces a string value for the Evaluation.  If compact is
             true then a more compact form of the description only including
             the node type and unique identifier is shown, else a full
             description including source and result are shown.  Child
             evaluations are printed using the depth string given as a prefix.
            </summary>
        </member>
        <member name="M:ognl.Evaluation.ToString">
            <summary> 
             Returns a string description of the Evaluation.
            </summary>
        </member>
        <member name="T:ognl.NumberElementsAccessor">
             <summary>
            Implementation of IElementsAccessor that returns an IEnumerator over integers from 0 up to
            the given target.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="T:ognl.NumericTypes">
             <summary>
            This interface defines some useful constants for describing the various possible
            numeric types of OGNL.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="F:ognl.NumericTypes.BOOL">
            <summary>
            Type tag meaning bool
            </summary>
        </member>
        <member name="F:ognl.NumericTypes.BYTE">
            <summary>Type tag meaning byte. </summary>
        </member>
        <member name="F:ognl.NumericTypes.CHAR">
            <summary>Type tag meaning char. </summary>
        </member>
        <member name="F:ognl.NumericTypes.SHORT">
            <summary>Type tag meaning short. </summary>
        </member>
        <member name="F:ognl.NumericTypes.INT">
            <summary>Type tag meaning int. </summary>
        </member>
        <member name="F:ognl.NumericTypes.LONG">
            <summary>Type tag meaning long. </summary>
        </member>
        <member name="F:ognl.NumericTypes.BIGINT">
            <summary>Type tag meaning java.math.BigInteger. </summary>
        </member>
        <member name="F:ognl.NumericTypes.FLOAT">
            <summary>Type tag meaning float. </summary>
        </member>
        <member name="F:ognl.NumericTypes.DOUBLE">
            <summary>Type tag meaning double. </summary>
        </member>
        <member name="F:ognl.NumericTypes.BIGDEC">
            <summary>Type tag meaning java.math.BigDecimal. </summary>
        </member>
        <member name="F:ognl.NumericTypes.NONNUMERIC">
            <summary>Type tag meaning something other than a number. </summary>
        </member>
        <member name="F:ognl.NumericTypes.MIN_REAL_TYPE">
            <summary>
            The smallest type tag that represents reals as opposed to integers.  You can see
            whether a type tag represents reals or integers by comparing the tag to this
            constant: all tags less than this constant represent integers, and all tags
            greater than or equal to this constant represent reals.  Of course, you must also
            check for NONNUMERIC, which means it is not a number at all.
            </summary>
        </member>
        <member name="T:ognl.MapPropertyAccessor">
            
            Implementation of PropertyAccessor that sets and gets properties by storing and looking
            up values in Maps.
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="T:ognl.ASTRootVarRef">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTEq">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTDivide">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.IndexerAccessor">
            <summary>
            IndexerAccessor
            </summary>
        </member>
        <member name="M:ognl.EvaluationPool.create(ognl.SimpleNode,System.Object)">
            
             Returns an Evaluation that contains the node, source and whether it
             is a set operation.  If there are no Evaluation objects in the
             pool one is created and returned.
            
        </member>
        <member name="M:ognl.EvaluationPool.create(ognl.SimpleNode,System.Object,System.Boolean)">
            
             Returns an Evaluation that contains the node, source and whether it
             is a set operation.  If there are no Evaluation objects in the
             pool one is created and returned.
            
        </member>
        <member name="M:ognl.EvaluationPool.recycle(ognl.Evaluation)">
            
             Recycles an Evaluation
            
        </member>
        <member name="M:ognl.EvaluationPool.recycleAll(ognl.Evaluation)">
            
             Recycles an of Evaluation and all of it's siblings
             and children.
            
        </member>
        <member name="M:ognl.EvaluationPool.recycleAll(System.Collections.IList)">
            
             Recycles a List of Evaluation objects
            
        </member>
        <member name="M:ognl.EvaluationPool.getSize">
            
             Returns the number of items in the pool
            
        </member>
        <member name="M:ognl.EvaluationPool.getCreatedCount">
            
             Returns the number of items this pool has created since
             it's construction.
            
        </member>
        <member name="M:ognl.EvaluationPool.getRecoveredCount">
            
             Returns the number of items this pool has recovered from
             the pool since its construction.
            
        </member>
        <member name="M:ognl.EvaluationPool.getRecycledCount">
            
             Returns the number of items this pool has recycled since
             it's construction.
            
        </member>
        <member name="T:ognl.DefaultTypeConverter">
            <summary>
            Default type conversion. Converts among numeric types and also strings.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="T:ognl.TypeConverter">
            
            Interface for accessing the type conversion facilities within a context.
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="M:ognl.TypeConverter.convertValue(System.Collections.IDictionary,System.Object,System.Reflection.MemberInfo,System.String,System.Object,System.Type)">
            
            Converts the given value to a given type.  The OGNL context, target, member and
            name of property being set are given.  This method should be able to handle
            conversion in general without any context, target, member or property name specified.
            @param context OGNL context under which the conversion is being done
            @param target target object in which the property is being set
            @param member member (Constructor, Method or Field) being set
            @param propertyName property name being set
            @param value value to be converted
            @param toType type to which value is converted
            @return Converted value of type toType or TypeConverter.NoConversionPossible to indicate that the
                    conversion was not possible.
            
        </member>
        <member name="M:ognl.DefaultTypeConverter.convertValue(System.Collections.IDictionary,System.Object,System.Type)">
            <summary>
            Use <see cref="M:ognl.OgnlOps.convertValue(System.Object,System.Type)"/>.
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="toType"></param>
            <returns></returns>
        </member>
        <member name="M:ognl.DefaultTypeConverter.convertValue(System.Collections.IDictionary,System.Object,System.Reflection.MemberInfo,System.String,System.Object,System.Type)">
            <summary>
            A overload version.
            </summary>
            <param name="context"></param>
            <param name="target"></param>
            <param name="member"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="toType"></param>
            <returns></returns>
        </member>
        <member name="T:ognl.MapElementsAccessor">
            <summary>
            Implementation of ElementsAccessor that returns an iterator over the map's values.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="M:ognl.MapElementsAccessor.getElements(System.Object)">
            <summary>
            Just return IDictionary.Values.GetEnumerator.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:ognl.ASTLess">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTInstanceof">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ObjectIndexedPropertyDescriptor">
            <summary>
            PropertyDescriptor subclass that describes an indexed set of read/write
            methods to get a property. Unlike IndexedPropertyDescriptor this allows
            the "key" to be an arbitrary object rather than just an int. 
            </summary>
            <remarks>
            Consequently it does not have a "readMethod" or "writeMethod" because it only expects
            a pattern like:
            <code lang="C#">
               public void set<i>Property</i>(<i>KeyType</i>, <i>ValueType</i>);
               public <i>ValueType</i> get<i>Property</i>(<i>KeyType</i>);
            </code>
            <para>and does not require the methods that access it as an array.  OGNL can
            get away with this without losing functionality because if the object
            does expose the properties they are most probably in a IDictionary and that case
            is handled by the normal OGNL property accessors.</para>
            For example, if an object were to have methods that accessed and "attributes"
            property it would be natural to index them by string rather than by integer
            and expose the attributes as a map with a different property name:
            <code>
               public void setAttribute(string name, object value);
               public object getAttribute(string name);
               public IDictionary getAttributes();
            </code>
            Note that the index get/set is called get/set <c>Attribute</c>
            whereas the collection getter is called <c>Attributes</c>.  This
            case is handled unambiguously by the OGNL property accessors because the
            set/get<c>Attribute</c> methods are detected by this object and the
            "attributes" case is handled by the <c>MapPropertyAccessor</c>.
            Therefore OGNL expressions calling this code would be handled in the
            following way:
            <table>
             <tr><th>OGNL Expression</th>
                 <th>Handling</th>
             </tr>
             <tr>
                 <td><code>attribute["name"]</code></td>
                 <td>Handled by an index getter, like <code>getAttribute(string)</code>.</td>
             </tr>
             <tr>
                 <td><code>attribute["name"] = value</code></td>
                 <td>Handled by an index setter, like <code>setAttribute(string, object)</code>.</td>
             </tr>
             <tr>
                 <td><code>attributes["name"]</code></td>
                 <td>Handled by <code>MapPropertyAccessor</code> via a <code>IDictionary.get()</code>.  This
                     will <b>not</b> go through the index get accessor.
                 </td>
             </tr>
             <tr>
                 <td><code>attributes["name"] = value</code></td>
                 <td>Handled by <code>MapPropertyAccessor</code> via a <code>IDictionary.put()</code>.  This
                     will <b>not</b> go through the index set accessor.
                 </td>
             </tr>
            </table>
            </remarks>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="T:java.IndexedPropertyDescriptor">
            <summary>
            IndexedPropertyDescriptor µÄÕªÒªËµÃ÷¡£
            </summary>
        </member>
        <member name="T:ognl.ASTStaticMethod">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="M:ognl.ASTStaticMethod.init(System.String,System.String)">
            Called from parser action. 
        </member>
        <member name="T:ognl.ASTMultiply">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTEval">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTBitNegate">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.IntrospectionException">
            <summary>
            Copy from java.beans
            Thrown when an exception happens during Introspection.
            </summary>
            <remarks>
            Typical causes include not being able to map a string class name
            to a Class object, not being able to resolve a string method name,
            or specifying a method name that has the wrong type signature for
            its intended use.
            </remarks>
        </member>
        <member name="M:ognl.IntrospectionException.#ctor(System.String)">
            <summary>
            Constructs an <code>IntrospectionException</code> with a 
            detailed message.
            </summary>
            <param name="mess">Descriptive message</param>
            
        </member>
        <member name="T:ognl.ArrayPropertyAccessor">
            <summary>
            Implementation of PropertyAccessor that uses numbers and dynamic subscripts as
            properties to index into Java arrays.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="M:ognl.ArrayPropertyAccessor.getProperty(System.Collections.IDictionary,System.Object,System.Object)">
            <summary>
            Specific property is: length.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ognl.MethodFailedException">
            <summary>
            Exception thrown if a method or constructor call fails.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="F:ognl.OgnlParserTokenManager.literalValue">
            Holds the last value computed by a constant token. 
        </member>
        <member name="F:ognl.OgnlParserTokenManager.charValue">
            Holds the last character escaped or in a character literal. 
        </member>
        <member name="F:ognl.OgnlParserTokenManager.charLiteralStartQuote">
            Holds char literal start token. 
        </member>
        <member name="F:ognl.OgnlParserTokenManager.stringBuffer">
            Holds the last string literal parsed. 
        </member>
        <member name="M:ognl.OgnlParserTokenManager.escapeChar">
            Converts an escape sequence into a character value. 
        </member>
        <member name="T:ognl.ASTNotEq">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTBitOr">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ArrayElementsAccessor">
            <summary>
            Implementation of IElementsAccessor that returns an iterator over a Array.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="M:ognl.ArrayElementsAccessor.getElements(System.Object)">
            <summary>
            Just return Array.GetEnumerator.
            </summary>
            <param name="target">The Array</param>
            <returns>Enumerator</returns>
        </member>
        <member name="T:ognl.ASTSubtract">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTShiftLeft">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTMap">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTConst">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="M:ognl.ASTConst.setValue(System.Object)">
            Called from parser actions. 
        </member>
        <member name="T:ognl.OgnlContext">
             <summary>
            This class defines the execution context for an OGNL expression
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="M:ognl.OgnlContext.#ctor">
            
            Constructs a new OgnlContext with the default class resolver, type converter and
            member access.
            
        </member>
        <member name="M:ognl.OgnlContext.#ctor(ognl.ClassResolver,ognl.TypeConverter,ognl.MemberAccess)">
            <summary>
             Constructs a new OgnlContext with the given class resolver, type converter and
             member access.  If any of these parameters is null the default will be used.
             </summary>
            
        </member>
        <member name="M:ognl.OgnlContext.recycleLastEvaluation">
            <summary>
             This method can be called when the last evaluation has been used
             and can be returned for reuse in the free pool maintained by the
             runtime.  This is not a necessary step, but is useful for keeping
             memory usage down.  This will recycle the last evaluation and then
             set the last evaluation to null.
            </summary>
        </member>
        <member name="M:ognl.OgnlContext.getKeepLastEvaluation">
            <summary>
             Returns true if the last evaluation that was done on this
             context is retained and available through <code>getLastEvaluation()</code>.
             The default is true.
            </summary>
        </member>
        <member name="M:ognl.OgnlContext.setKeepLastEvaluation(System.Boolean)">
            <summary>
             Sets whether the last evaluation that was done on this
             context is retained and available through <code>getLastEvaluation()</code>.
             The default is true.
            </summary>
        </member>
        <member name="M:ognl.OgnlContext.getCurrentEvaluation">
            
             Gets the current Evaluation from the top of the stack.
             This is the Evaluation that is in process of evaluating.
            
        </member>
        <member name="M:ognl.OgnlContext.getRootEvaluation">
            <summary>
             Gets the root of the evaluation stack.
             This Evaluation contains the node representing
             the root expression and the source is the root
             source object.
            </summary>
        </member>
        <member name="M:ognl.OgnlContext.getEvaluation(System.Int32)">
            <summary>
             Returns the Evaluation at the relative index given.  This should be
             zero or a negative number as a relative reference back up the evaluation
             stack.  Therefore getEvaluation(0) returns the current Evaluation.
            </summary>
        </member>
        <member name="M:ognl.OgnlContext.pushEvaluation(ognl.Evaluation)">
            <summary>
             Pushes a new Evaluation onto the stack.  This is done
             before a node evaluates.  When evaluation is complete
             it should be popped from the stack via <code>popEvaluation()</code>.
            </summary>
        </member>
        <member name="M:ognl.OgnlContext.popEvaluation">
            <summary>
             Pops the current Evaluation off of the top of the stack.
             This is done after a node has completed its evaluation.
            </summary>
        </member>
        <member name="T:ognl.MemberAccess">
            <summary>
            This interface provides a hook for preparing for accessing members
            of objects.  The Java2 version of this method can allow access
            to otherwise inaccessable members, such as private fields.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            @version 15 October 1999
            
        </member>
        <member name="M:ognl.MemberAccess.setup(System.Collections.IDictionary,System.Object,System.Reflection.MemberInfo,System.String)">
            <summary>
               Sets the member up for accessibility
            </summary>
        </member>
        <member name="M:ognl.MemberAccess.restore(System.Collections.IDictionary,System.Object,System.Reflection.MemberInfo,System.String,System.Object)">
            <summary>
            Restores the member from the previous setup call.
            </summary>
        </member>
        <member name="M:ognl.MemberAccess.isAccessible(System.Collections.IDictionary,System.Object,System.Reflection.MemberInfo,System.String)">
            <summary>
             Returns true if the given member is accessible or can be made accessible
            by this object.
            </summary>
        </member>
        <member name="T:ognl.Token">
            Describes the input token stream.
        </member>
        <member name="F:ognl.Token.kind">
            An integer that describes the kind of this token.  This numbering
            system is determined by JavaCCParser, and a table of these numbers is
            stored in the file ...Constants.java.
        </member>
        <member name="F:ognl.Token.beginLine">
            beginLine and beginColumn describe the position of the first character
            of this token; endLine and endColumn describe the position of the
            last character of this token.
        </member>
        <member name="F:ognl.Token.beginColumn">
            beginLine and beginColumn describe the position of the first character
            of this token; endLine and endColumn describe the position of the
            last character of this token.
        </member>
        <member name="F:ognl.Token.endLine">
            beginLine and beginColumn describe the position of the first character
            of this token; endLine and endColumn describe the position of the
            last character of this token.
        </member>
        <member name="F:ognl.Token.endColumn">
            beginLine and beginColumn describe the position of the first character
            of this token; endLine and endColumn describe the position of the
            last character of this token.
        </member>
        <member name="F:ognl.Token.image">
            The string image of the token.
        </member>
        <member name="F:ognl.Token.next">
            A reference to the next regular (non-special) token from the input
            stream.  If this is the last token from the input stream, or if the
            token manager has not read tokens beyond this one, this field is
            set to null.  This is true only if this token is also a regular
            token.  Otherwise, see below for a description of the contents of
            this field.
        </member>
        <member name="F:ognl.Token.specialToken">
            This field is used to access special tokens that occur prior to this
            token, but after the immediately preceding regular (non-special) token.
            If there are no such special tokens, this field is set to null.
            When there are more than one such special token, this field refers
            to the last of these special tokens, which in turn refers to the next
            previous special token through its specialToken field, and so on
            until the first special token (whose specialToken field is null).
            The next fields of special tokens refer to other special tokens that
            immediately follow it (without an intervening regular token).  If there
            is no such token, this field is null.
        </member>
        <member name="M:ognl.Token.ToString">
            Returns the image.
        </member>
        <member name="M:ognl.Token.newToken(System.Int32)">
             Returns a new Token object, by default. However, if you want, you
             can create and return subclass objects based on the value of ofKind.
             Simply add the cases to the switch for all those special cases.
             For example, if you have a subclass of Token called IDToken that
             you want to create if ofKind is ID, simlpy add something like :
            
                case MyParserConstants.ID : return new IDToken();
            
             to the following switch statement. Then you can cast matchedToken
             variable to the appropriate type and use it in your lexical actions.
        </member>
        <member name="T:ognl.ASTXor">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTThisVarRef">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTShiftRight">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.InappropriateExpressionException">
            <summary>
            Exception thrown if an OGNL expression is evaluated in the wrong context; the usual
            case is when an expression that does not end in a property reference is passed to
            <code>setValue</code>.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="T:ognl.SetPropertyAccessor">
            <summary>
            Implementation of <see href="PropertyAccessor"/> that uses numbers and dynamic subscripts as
            properties to index into ICollection.
            </summary>
             <remarks></remarks>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="F:ognl.TokenMgrError.LEXICAL_ERROR">
            Lexical error occured.
        </member>
        <member name="F:ognl.TokenMgrError.STATIC_LEXER_ERROR">
            An attempt wass made to create a second instance of a static token manager.
        </member>
        <member name="F:ognl.TokenMgrError.INVALID_LEXICAL_STATE">
            Tried to change to an invalid lexical state.
        </member>
        <member name="F:ognl.TokenMgrError.LOOP_DETECTED">
            Detected (and bailed out of) an infinite loop in the token manager.
        </member>
        <member name="F:ognl.TokenMgrError.errorCode">
            Indicates the reason why the exception is thrown. It will have
            one of the above 4 values.
        </member>
        <member name="M:ognl.TokenMgrError.addEscapes(System.String)">
            Replaces unprintable characters by their espaced (or unicode escaped)
            equivalents in the given string
        </member>
        <member name="M:ognl.TokenMgrError.LexicalError(System.Boolean,System.Int32,System.Int32,System.Int32,System.String,System.Char)">
            Returns a detailed message for the Error when it is thrown by the
            token manager to indicate a lexical error.
            Parameters : 
               EOFSeen     : indicates if EOF caused the lexicl error
               curLexState : lexical state in which this error occured
               errorLine   : line number when the error occured
               errorColumn : column number when the error occured
               errorAfter  : prefix that was seen before this error occured
               curchar     : the offending character
            Note: You can customize the lexical error message by modifying this method.
        </member>
        <member name="M:ognl.TokenMgrError.getMessage">
             You can also modify the body of this method to customize your error messages.
             For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not
             of end-users concern, so you can return something like : 
            
                 "Internal Error : Please file a bug report .... "
            
             from this method for such cases in the release version of your parser.
        </member>
        <member name="T:ognl.ASTTest">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTNegate">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:java.Util">
            <summary>
            Long µÄÕªÒªËµÃ÷¡£
            </summary>
        </member>
        <member name="T:ognl.ParseException">
             This exception is thrown when parse errors are encountered.
             You can explicitly create objects of this exception type by
             calling the method generateParseException in the generated
             parser.
            
             You can modify this class to customize your error reporting
             mechanisms so long as you retain the public fields.
        </member>
        <!-- Badly formed XML comment ignored for member "M:ognl.ParseException.#ctor(ognl.Token,System.Int32[][],System.String[])" -->
        <member name="M:ognl.ParseException.#ctor">
            The following constructors are for use by you for whatever
            purpose you can think of.  Constructing the exception in this
            manner makes the exception behave in the normal way - i.e., as
            documented in the class "Exception".  The fields "errorToken",
            "expectedTokenSequences", and "tokenImage" do not contain
            relevant information.  The JavaCC generated code does not use
            these constructors.
        </member>
        <member name="F:ognl.ParseException.specialConstructor">
            This variable determines which constructor was used to create
            this object and thereby affects the semantics of the
            "getMessage" method (see below).
        </member>
        <member name="F:ognl.ParseException.currentToken">
            This is the last token that has been consumed successfully.  If
            this object has been created due to a parse error, the token
            followng this token will (therefore) be the first error token.
        </member>
        <member name="F:ognl.ParseException.expectedTokenSequences">
            Each entry in this array is an array of integers.  Each array
            of integers represents a sequence of tokens (by their ordinal
            values) that is expected at this point of the parse.
        </member>
        <member name="F:ognl.ParseException.tokenImage">
            This is a reference to the "tokenImage" array of the generated
            parser within which the parse error occurred.  This array is
            defined in the generated ...Constants interface.
        </member>
        <member name="M:ognl.ParseException.getMessage">
            This method has the standard behavior when this object has been
            created using the standard constructors.  Otherwise, it uses
            "currentToken" and "expectedTokenSequences" to generate a parse
            error message and returns it.  If this object has been created
            due to a parse error, and you do not catch it (it gets thrown
            from the parser), then this method is called during the printing
            of the stack trace, and hence the correct error message
            gets displayed.
        </member>
        <member name="F:ognl.ParseException.eol">
            The end of line string for this machine.
        </member>
        <member name="M:ognl.ParseException.add_escapes(System.String)">
            Used to convert raw characters to their escaped version
            when these raw version cannot be used as part of an ASCII
            string literal.
        </member>
        <member name="T:ognl.ASTSequence">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTSelect">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTRemainder">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTProperty">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="M:ognl.ASTProperty.isIndexedAccess">
                    Returns true iff this property is itself an index reference.
        </member>
        <member name="M:ognl.ASTProperty.getIndexedPropertyType(ognl.OgnlContext,System.Object)">
                    Returns true if this property is described by an IndexedPropertyDescriptor
                    and that if followed by an index specifier it will call the index get/set
                    methods rather than go through property accessors.
        </member>
        <member name="T:ognl.ASTMethod">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="M:ognl.ASTMethod.setMethodName(System.String)">
            Called from parser action. 
        </member>
        <member name="M:ognl.ASTMethod.getMethodName">
                    Returns the method name that this node will call.
        </member>
        <member name="T:ognl.ASTIn">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTBitAnd">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTAnd">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.IteratorElementsAccessor">
            <summary>
            Implementation of the IElementsAccessor interface for Iterators, which simply returns
            the target iterator itself.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="M:ognl.IteratorElementsAccessor.getElements(System.Object)">
            <summary>
            There is no Iterator in C#, use IEnumerator instead.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:ognl.DefaultClassResolver">
            <summary>
            Default class resolution.  Uses Type.GetType() to look up classes by name.
            It also looks in the "System" package if the class named does not give
            a package specifier, allowing easier usage of these classes.
            </summary>
            <remarks>
            You can specify Full assamblly class name as parameter. Under constraint of OGNL syntax, 
            the full name in following form: <c>AssambllyName.namespace.className</c>.
            </remarks>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="T:ognl.ClassResolver">
            <summary>
            This interface defines an object that will resolve a class from a string
            and a ognl context table.
            </summary>
            <remarks>
            In C#, Assamblly(DLL) is basic unit of Classes.
            </remarks>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="M:ognl.ClassResolver.classForName(System.String,System.Collections.IDictionary)">
            <summary>
            Resolve Class Type by class name.
            </summary>
            <param name="className"></param>
            <param name="context">OgnlContext</param>
            <returns></returns>
        </member>
        <member name="T:ognl.OgnlRuntime">
            This is an abstract class with static methods that define runtime
            caching information in OGNL.
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="F:ognl.OgnlRuntime.NoConversionPossible">
            Token returned by TypeConverter for no conversion possible 
        </member>
        <member name="F:ognl.OgnlRuntime.INDEXED_PROPERTY_NONE">
            Not an indexed property 
        </member>
        <member name="F:ognl.OgnlRuntime.INDEXED_PROPERTY_INT">
            JavaBeans IndexedProperty 
        </member>
        <member name="F:ognl.OgnlRuntime.INDEXED_PROPERTY_OBJECT">
            OGNL ObjectIndexedProperty 
        </member>
        <member name="F:ognl.OgnlRuntime.HEX_PADDING">
                    Prefix padding for hexadecimal numbers to HEX_LENGTH.
        </member>
        <member name="F:ognl.OgnlRuntime.HEX_PREFIX">
                    Hexadecimal prefix for printing "pointers".
        </member>
        <member name="F:ognl.OgnlRuntime.NULL_OBJECT_STRING">
                    Returned by <CODE>getUniqueDescriptor()</CODE> when the
                    object is <CODE>null</CODE>.
        </member>
        <member name="M:ognl.OgnlRuntime.getTargetClass(System.Object)">
                    Gets the "target" class of an object for looking up accessors that
                    are registered on the target.  If the object is a Type object this
                    will return the Type itself, else it will return object's GetType()
                    result.
        </member>
        <member name="M:ognl.OgnlRuntime.getBaseName(System.Object)">
                    Returns the base name (the class name without the
                    package name prepended) of the object given.
        </member>
        <member name="M:ognl.OgnlRuntime.getClassBaseName(System.Type)">
                    Returns the base name (the class name without the
                    package name prepended) of the class given.
        </member>
        <member name="M:ognl.OgnlRuntime.getPackageName(System.Object)">
                    Returns the package name of the object's class.
        </member>
        <member name="M:ognl.OgnlRuntime.getClassPackageName(System.Type)">
                    Returns the package name of the class given.
        </member>
        <!-- Badly formed XML comment ignored for member "M:ognl.OgnlRuntime.getPointerString(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:ognl.OgnlRuntime.getPointerString(System.Object)" -->
        <member name="M:ognl.OgnlRuntime.getUniqueDescriptor(System.Object,System.Boolean)">
                    Returns a unique descriptor string that includes the object's
                    class and a unique integer identifier.  If fullyQualified is
                    true then the class name will be fully qualified to include
                    the package name, else it will be just the class' base name.
        </member>
        <member name="M:ognl.OgnlRuntime.getUniqueDescriptor(System.Object)">
                    Returns a unique descriptor string that includes the object's
                    class' base name and a unique integer identifier.
        </member>
        <member name="M:ognl.OgnlRuntime.toArray(System.Collections.IList)">
                    Utility to convert a List into an object[] array.  If the list is zero
                    elements this will return a constant array; toArray() on List always
                    returns a new object and this is wasteful for our purposes.
        </member>
        <member name="M:ognl.OgnlRuntime.getParameterTypes(System.Reflection.MethodInfo)">
                    Returns the parameter types of the given method.
        </member>
        <member name="M:ognl.OgnlRuntime.getParameterTypes(System.Reflection.ConstructorInfo)">
                    Returns the parameter types of the given method.
        </member>
        <!-- Badly formed XML comment ignored for member "M:ognl.OgnlRuntime.invokeMethod(System.Object,System.Reflection.MethodInfo,System.Object[])" -->
        <member name="M:ognl.OgnlRuntime.getArgClass(System.Object)">
             Gets the class for a method argument that is appropriate for looking up methods
             by reflection, by looking for the standard primitive wrapper classes and
             exchanging for them their underlying primitive class objects.  Other classes are
             passed through unchanged.
            
             @param arg an object that is being passed to a method
             @return the class to use to look up the method
        </member>
        <member name="M:ognl.OgnlRuntime.isTypeCompatible(System.Object,System.Type)">
            Tells whether the given object is compatible with the given class
            ---that is, whether the given object can be passed as an argument
            to a method or constructor whose parameter type is the given class.
            If object is null this will return true because null is compatible
            with any type.
        </member>
        <member name="M:ognl.OgnlRuntime.areArgsCompatible(System.Object[],System.Type[])">
            Tells whether the given array of objects is compatible with the given array of
            classes---that is, whether the given array of objects can be passed as arguments
            to a method or constructor whose parameter types are the given array of classes.
        </member>
        <member name="M:ognl.OgnlRuntime.isMoreSpecific(System.Type[],System.Type[])">
            Tells whether the first array of classes is more specific than the second.
            Assumes that the two arrays are of the same length.
        </member>
        <member name="M:ognl.OgnlRuntime.getAppropriateMethod(ognl.OgnlContext,System.Object,System.Object,System.String,System.String,System.Collections.IList,System.Object[],System.Object[])">
                    Gets the appropriate method to be called for the given target, method name and arguments.
                    If successful this method will return the Method within the target that can be called
                    and the converted arguments in actualArgs.  If unsuccessful this method will return
                    null and the actualArgs will be empty.
        </member>
        <member name="M:ognl.OgnlRuntime.getMethodValue(ognl.OgnlContext,System.Object,System.String,System.Boolean)">
                    If the checkAccessAndExistence flag is true this method will check to see if the
                    method exists and if it is accessible according to the context's MemberAccess.
                    If neither test passes this will return NotFound.
        </member>
        <member name="M:ognl.OgnlRuntime.getPropertyDescriptors(System.Type)">
                    This method returns the property descriptors for the given class as a IDictionary
        </member>
        <member name="M:ognl.OgnlRuntime.getPropertyDescriptor(System.Type,System.String)">
            	 * TODO: About PropertyDescriptor
                    This method returns a PropertyDescriptor for the given class and property name using
                    a IDictionary lookup (using getPropertyDescriptorsMap()).
        </member>
        <member name="M:ognl.OgnlRuntime.getPropertyDescriptorFromArray(System.Type,System.String)">
                    Gets the property descriptor with the given name for the target class given.
                    @param targetClass      Type for which property descriptor is desired
                    @param name             Name of property
                    @return                 PropertyDescriptor of the named property or null if
                                            the class has no property with the given name
        </member>
        <member name="M:ognl.OgnlRuntime.getIndexedPropertyType(ognl.OgnlContext,System.Type,System.String)">
                    Determines the index property type, if any.  Returns <code>INDEXED_PROPERTY_NONE</code> if the
                    property is not index-accessible as determined by OGNL or JavaBeans.  If it is indexable
                    then this will return whether it is a JavaBeans indexed property, conforming to the
                    indexed property patterns (returns <code>INDEXED_PROPERTY_INT</code>) or if it conforms
                    to the OGNL arbitrary object indexable (returns <code>INDEXED_PROPERTY_OBJECT</code>).
        </member>
        <member name="T:ognl.OgnlRuntime.ClassCache">
                    This is a highly specialized map for storing values keyed by Type objects.
        </member>
        <member name="T:ognl.OgnlOps">
            
            This is an abstract class with static methods that define the operations of OGNL.
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="M:ognl.OgnlOps.compareWithConversion(System.Object,System.Object)">
            <summary>
            Compares two objects for equality, even if it has to convert
            one of them to the other type.  If both objects are numeric
            they are converted to the widest type and compared. 
            </summary>
            <remarks>If one is non-numeric and one is numeric the non-numeric is
            converted to double and compared to the double numeric value.  
            <para>If both are non-numeric and Comparable and the
            types are compatible (i.e. v1 is of the same or superclass
            of v2's type) they are compared with Comparable.compareTo().
            If both values are non-numeric and not Comparable or of
            incompatible classes this will throw and IllegalArgumentException.
            </para>
            </remarks> 
            <param name="v1"> First value to compare</param>   
            <param name="v2"> second value to compare</param>  
            
            <returns>
                  integer describing the comparison between the two objects.
                     A negative number indicates that v1 &lt; v2.  
                     Positive indicates that v1 &gt; v2.  
                     Zero indicates v1 == v2.
            </returns> 
            
             <exception cref="T:System.ArgumentException">if the objects are both non-numeric
                         yet of incompatible types or do not implement Comparable.</exception>
            
        </member>
        <member name="M:ognl.OgnlOps.isEqual(System.Object,System.Object)">
             <summary>
            Returns true if object1 is equal to object2 in either the
            sense that they are the same object or, if both are non-null
            if they are equal in the <c>Equals()</c> sense.
            </summary>
            <param name="object1" >First object to compare</param>
            <param name="object2">Second object to compare</param>
            
            <returns>true if object1 == object1</returns> 
            
        </member>
        <member name="M:ognl.OgnlOps.booleanValue(System.Object)">
            <summary>
            Evaluates the given object as a bool: if it is a Boolean object, it's easy; if
            it's a Number or a Character, returns true for non-zero objects; and otherwise
            returns true for non-null objects.
            </summary>
            <param name="value" >an object to interpret as a bool</param>
            <returns>the bool value implied by the given object</returns> 
            
        </member>
        <member name="M:ognl.OgnlOps.longValue(System.Object)">
            <summary>
            Evaluates the given object as a long integer.
            </summary>
            <param name="value">an object to interpret as a long integer</param>
            <returns>the long integer value implied by the given object</returns> 
            <exception cref="T:System.FormatException"> if the given object can't be understood as a long integer</exception>
            
        </member>
        <member name="M:ognl.OgnlOps.doubleValue(System.Object)">
            <summary>
            Evaluates the given object as a double-precision floating-point number.
            </summary>
            <param name="value">an object to interpret as a double</param>
            <returns>the double value implied by the given object</returns>
             <exception cref="T:System.FormatException"> if the give object can't be understood as a double</exception>
            
        </member>
        <member name="M:ognl.OgnlOps.bigIntValue(System.Object)">
             <summary>
            Evaluates the given object as a BigInteger.
            </summary>
            <param name="value">an object to interpret as a BigInt</param>
            <returns>the BigInt value implied by the given object</returns>
             <exception cref="T:System.FormatException"> if the give object can't be understood as a BigInt</exception>
            
        </member>
        <member name="M:ognl.OgnlOps.bigDecValue(System.Object)">
            <summary>
            Evaluates the given object as a BigDecimal.
            </summary>
            <param name="value">an object to interpret as a BigDecimal</param>
            <returns>the BigDecimal value implied by the given object</returns>
             <exception cref="T:System.FormatException"> if the give object can't be understood as a BigDecimal</exception>
            
        </member>
        <member name="M:ognl.OgnlOps.stringValue(System.Object,System.Boolean)">
            <summary>
            Evaluates the given object as a string and trims it if the trim flag is true.
            </summary>
            <param name="value">an object to interpret as a string</param>
            <returns>the string value implied by the given object as returned by the ToString() method,
                   or "null" if the object is null.</returns>
        </member>
        <member name="M:ognl.OgnlOps.stringValue(System.Object)">
            <summary>
            Evaluates the given object as a string.
            </summary>
            <param name="value">an object to interpret as a string</param>
            <returns>the string value implied by the given object as returned by the ToString() method,
                   or "null" if the object is null.</returns>
        </member>
        <member name="M:ognl.OgnlOps.getNumericType(System.Object)">
            <summary>
            Returns a constant from the NumericTypes interface that represents the numeric
            type of the given object.
            </summary>
            <param name="value">an object that needs to be interpreted as a number</param>
            <returns>the appropriate constant from the NumericTypes interface</returns> 
            
        </member>
        <member name="M:ognl.OgnlOps.convertValue(System.Object,System.Type)">
             <summary>
             Returns the value converted numerically to the given class type
             </summary>
             <remarks>
             This method also detects when arrays are being converted and
             converts the components of one array to the type of the other.
             </remarks>
             <param name="value">an object to be converted to the given type</param> 
            <param name="toType">class type to be converted to</param>
             <returns>converted value of the type given, or value if the value
                            cannot be converted to the given type.</returns>
            
        </member>
        <member name="M:ognl.OgnlOps.getNumericType(System.Object,System.Object)">
            <summary>
            Returns the constant from the NumericTypes interface that best expresses the type
            of a numeric operation on the two given objects.
            </summary>
            <param name="v1">one argument to a numeric operator</param>
            <param name="v2">the other argument</param> 
            <returns>the appropriate constant from the NumericTypes interface</returns>
            
        </member>
        <member name="M:ognl.OgnlOps.getNumericType(System.Int32,System.Int32,System.Boolean)">
            
            Returns the constant from the NumericTypes interface that best expresses the type
            of an operation, which can be either numeric or not, on the two given types.
            
            @param t1 type of one argument to an operator
            @param t2 type of the other argument
            @param canBeNonNumeric whether the operator can be interpreted as non-numeric
            @return the appropriate constant from the NumericTypes interface
            
        </member>
        <member name="M:ognl.OgnlOps.getNumericType(System.Object,System.Object,System.Boolean)">
            
            Returns the constant from the NumericTypes interface that best expresses the type
            of an operation, which can be either numeric or not, on the two given objects.
            
            @param v1 one argument to an operator
            @param v2 the other argument
            @param canBeNonNumeric whether the operator can be interpreted as non-numeric
            @return the appropriate constant from the NumericTypes interface
            
        </member>
        <member name="M:ognl.OgnlOps.newInteger(System.Int32,System.Int64)">
            
            Returns a new Number object of an appropriate type to hold the given integer
            value.  The type of the returned object is consistent with the given type
            argument, which is a constant from the NumericTypes interface.
            
            @param type    the nominal numeric type of the result, a constant from the NumericTypes interface
            @param value   the integer value to convert to a Number object
            @return        a Number object with the given value, of type implied by the type argument
            
        </member>
        <member name="M:ognl.OgnlOps.newReal(System.Int32,System.Double)">
            
            Returns a new Number object of an appropriate type to hold the given real value.
            The type of the returned object is always either Float or Double, and is only
            Float if the given type tag (a constant from the NumericTypes interface) is
            FLOAT.
            
            @param type    the nominal numeric type of the result, a constant from the NumericTypes interface
            @param value   the real value to convert to a Number object
            @return        a Number object with the given value, of type implied by the type argument
            
        </member>
        <member name="T:ognl.ASTStaticField">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="M:ognl.ASTStaticField.init(System.String,System.String)">
            Called from parser action. 
        </member>
        <member name="T:ognl.ASTSelectLast">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.IntHashMap">
            <summary>
            A IDictionary that uses ints as the keys.
            </summary>
            <remarks>
            <para>Use just like any java.util.IDictionary, except that the keys must be ints.
            This is much faster than creating a new Integer for each access.</para>
            <para>For non-IDictionary access (faster) use the put(int, object) method.</para>
            <para>This class : IDictionary for convenience, but this is not the most
            efficient usage.</para>
            </remarks>
            
        </member>
        <member name="T:ognl.ObjectElementsAccessor">
            <summary>
            Implementation of ElementsAccessor that returns a single-element iterator, containing
            the original target object.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="T:ognl.JavaCharStream">
            An implementation of interface CharStream, where the stream is assumed to
            contain only ASCII characters (with java-like unicode escape processing).
        </member>
        <member name="M:ognl.JavaCharStream.getColumn">
            @deprecated 
            @see #getEndColumn
        </member>
        <member name="M:ognl.JavaCharStream.getLine">
            @deprecated 
            @see #getEndLine
        </member>
        <member name="M:ognl.JavaCharStream.adjustBeginLineColumn(System.Int32,System.Int32)">
            Method to adjust line and column numbers for the start of a token.
        </member>
        <member name="T:ognl.ASTOr">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTGreaterEq">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTGreater">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTChain">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:java.Introspector">
            <summary>
            Introspector µÄÕªÒªËµÃ÷¡£
            </summary>
        </member>
        <member name="M:java.Introspector.getPropertyDescriptors(System.Type)">
            <summary>
            Include int indexer.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:ognl.ExpressionSyntaxException">
            <summary> 
            Exception thrown if a malformed OGNL expression is encountered.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="T:ognl.DefaultMemberAccess">
            <summary>
            This class provides methods for setting up and restoring
            access in a Field.  Java 2 provides access utilities for setting
            and getting fields that are non-public.  This object provides
            coarse-grained access controls to allow access to private, protected
            and package protected members.  This will apply to all classes
            and members.
            </summary>
            <remarks>
            Dynamic member access permission is not a part of plan.
            </remarks>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            @version 15 October 1999
            
        </member>
        <member name="M:ognl.DefaultMemberAccess.isAccessible(System.Collections.IDictionary,System.Object,System.Reflection.MemberInfo,System.String)">
            
             Returns true if the given member is accessible or can be made accessible
             by this object.
            
        </member>
        <member name="T:ognl.CollectionElementsAccessor">
            <summary>
            Implementation of ElementsAccessor that returns a collection's iterator.
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="M:ognl.CollectionElementsAccessor.getElements(System.Object)">
            <summary>
            Just return ICollection.GetEnumerator().
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:ognl.OgnlInvokePermission">
             <summary>
            BasicPermission subclass that defines a permission token for invoking
            methods within OGNL.  This does not override any methods (except
            constructors) and does not implement actions.  
            </summary>
            <remarks>
            It is similar in spirit
            to the java.lang.reflect.ReflectPermission class in that it
            guards access to methods.
            </remarks>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="T:ognl.Ognl">
            <summary>
            This class provides static methods for parsing and interpreting OGNL expressions.
            </summary>
            <example>
            The simplest use of the Ognl class is to get the value of an expression from
            an object, without extra context or pre-parsing.
            
            <code lang="C#">
            using ognl;
            
              try 
              {
                  result = Ognl.getValue(expression, root);
              } catch (OgnlException ex) 
              {
                 // Report error or recover
              }
            </code>
            
            This will parse the expression given and evaluate it against the root object
            given, returning the result.  If there is an error in the expression, such
            as the property is not found, the exception is encapsulated into an
            <see href="OgnlException"/>.
            
            <para>Other more sophisticated uses of Ognl can pre-parse expressions.  This
            provides two advantages: in the case of user-supplied expressions it
            allows you to catch parse errors before evaluation and it allows you to
            cache parsed expressions into an AST for better speed during repeated use.
            The pre-parsed expression is always returned as an <c>object</c>
            to simplify use for programs that just wish to store the value for
            repeated use and do not care that it is an AST.  If it does care
            it can always safely cast the value to an <c>AST</c> type.</para>
            
            <para>The Ognl class also takes a <I>context map</I> as one of the parameters
            to the set and get methods.  This allows you to put your own variables
            into the available namespace for OGNL expressions.  The default context
            contains only the <c>#root</c> and <c>#context</c> keys,
            which are required to be present.  The <c>addDefaultContext(object, IDictionary)</c>
            method will alter an existing <c>IDictionary</c> to put the defaults in.
            Here is an example that shows how to extract the <c>documentName</c>
            property out of the root object and append a string with the current user
            name in parens:</para>
            
            <code lang="C#">
                private IDictionary	context = new HashMap();
            
                public void setUserName(string value)
                {
                    context.put("userName", value);
                }
            
                try 
                {
                   // get value using our own custom context map
                   result = Ognl.getValue("documentName + \" (\" + ((#userName == null) ? \"&lt;nobody&gt;\" : #userName) + \")\"", context, root);
                } catch (OgnlException ex) 
                {
                    // Report error or recover
                }
            
            </code>
            </example>
            
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            @version 27 June 1999
            
        </member>
        <member name="M:ognl.Ognl.parseExpression(System.String)">
            <summary>
            Parses the given OGNL expression and returns a tree representation of the
            expression that can be used by <c>Ognl</c> static methods.
            </summary>
            <param name="expression">the OGNL expression to be parsed</param> 
            <returns>a tree representation of the expression</returns> 
            <exception cref="T:ognl.ExpressionSyntaxException">if the expression is malformed</exception>
            <exception cref="T:ognl.OgnlException"> if there is a pathological environmental problem</exception>
            
        </member>
        <member name="M:ognl.Ognl.createDefaultContext(System.Object)">
            <summary>
            Creates and returns a new standard naming context for evaluating an OGNL
            expression.
            </summary>
            <param name="root">the root of the object graph</param>
            <returns>
            a new IDictionary with the keys <c>root</c> and <c>context</c>
            set appropriately</returns>
            
        </member>
        <member name="M:ognl.Ognl.createDefaultContext(System.Object,ognl.ClassResolver)">
            <summary>
            Creates and returns a new standard naming context for evaluating an OGNL
            expression.
            </summary>
            <param name="root">the root of the object graph</param>
            <returns>
            a new IDictionary with the keys <c>root</c> and <c>context</c>
            set appropriately
            </returns>
            
        </member>
        <member name="M:ognl.Ognl.createDefaultContext(System.Object,ognl.ClassResolver,ognl.TypeConverter)">
            <summary>
            Creates and returns a new standard naming context for evaluating an OGNL
            expression.
            </summary>
            <param name="root">the root of the object graph</param>
            <returns>
            a new IDictionary with the keys <c>root</c> and <c>context</c>
            set appropriately
            </returns>
            
        </member>
        <member name="M:ognl.Ognl.createDefaultContext(System.Object,ognl.ClassResolver,ognl.TypeConverter,ognl.MemberAccess)">
            <summary>
            Creates and returns a new standard naming context for evaluating an OGNL
            expression.
            </summary>
            <param name="root">the root of the object graph</param>
            <returns>
            a new IDictionary with the keys <c>root</c> and <c>context</c>
            set appropriately
            </returns>
            
        </member>
        <member name="M:ognl.Ognl.addDefaultContext(System.Object,System.Collections.IDictionary)">
            <summary>
            Appends the standard naming context for evaluating an OGNL expression
            into the context given so that cached maps can be used as a context.
            </summary>
            <param name="root"> the root of the object graph</param>
            <param name="context"> the context to which OGNL context will be added.</param>
            <returns>
            a new IDictionary with the keys <c>root</c> and <c>context</c>
            set appropriately
            </returns>
        </member>
        <member name="M:ognl.Ognl.addDefaultContext(System.Object,ognl.ClassResolver,System.Collections.IDictionary)">
            <summary>
            Appends the standard naming context for evaluating an OGNL expression
            into the context given so that cached maps can be used as a context.
            </summary>
            <param name="root"> the root of the object graph</param>
            <param name="context"> the context to which OGNL context will be added.</param>
            <returns>
            a new IDictionary with the keys <c>root</c> and <c>context</c>
            set appropriately
            </returns>
        </member>
        <member name="M:ognl.Ognl.addDefaultContext(System.Object,ognl.ClassResolver,ognl.TypeConverter,System.Collections.IDictionary)">
            <summary>
            Appends the standard naming context for evaluating an OGNL expression
            into the context given so that cached maps can be used as a context.
            </summary>
            <param name="root"> the root of the object graph</param>
            <param name="context"> the context to which OGNL context will be added.</param>
            <returns>
            a new IDictionary with the keys <c>root</c> and <c>context</c>
            set appropriately
            </returns>
        </member>
        <member name="M:ognl.Ognl.addDefaultContext(System.Object,ognl.ClassResolver,ognl.TypeConverter,ognl.MemberAccess,System.Collections.IDictionary)">
            <summary>
            Appends the standard naming context for evaluating an OGNL expression
            into the context given so that cached maps can be used as a context.
            </summary>
            <param name="root"> the root of the object graph</param>
            <param name="context"> the context to which OGNL context will be added.</param>
            <returns>
            a new IDictionary with the keys <c>root</c> and <c>context</c>
            set appropriately
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ognl.Ognl.getValue(System.Object,System.Collections.IDictionary,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:ognl.Ognl.getValue(System.Object,System.Collections.IDictionary,System.Object,System.Type)" -->
        <!-- Badly formed XML comment ignored for member "M:ognl.Ognl.getValue(System.String,System.Collections.IDictionary,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:ognl.Ognl.getValue(System.String,System.Collections.IDictionary,System.Object,System.Type)" -->
        <!-- Badly formed XML comment ignored for member "M:ognl.Ognl.getValue(System.Object,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:ognl.Ognl.getValue(System.Object,System.Object,System.Type)" -->
        <member name="M:ognl.Ognl.getValue(System.String,System.Object)">
            
            Convenience method that combines calls to <code> parseExpression </code> and
            <code> getValue</code>.
            
            @see #parseExpression(string)
            @see #getValue(object,object)
            @param expression the OGNL expression to be parsed
            @param root the root object for the OGNL expression
            @return the result of evaluating the expression
            @// throws ExpressionSyntaxException if the expression is malformed
            @// throws MethodFailedException if the expression called a method which failed
            @// throws NoSuchPropertyException if the expression referred to a nonexistent property
            @// throws InappropriateExpressionException if the expression can't be used in this context
            @// throws OgnlException if there is a pathological environmental problem
            
        </member>
        <member name="M:ognl.Ognl.getValue(System.String,System.Object,System.Type)">
            
            Convenience method that combines calls to <code> parseExpression </code> and
            <code> getValue</code>.
            
            @see #parseExpression(string)
            @see #getValue(object,object)
            @param expression the OGNL expression to be parsed
            @param root the root object for the OGNL expression
            @param resultType the converted type of the resultant object, using the context's type converter
            @return the result of evaluating the expression
            @// throws ExpressionSyntaxException if the expression is malformed
            @// throws MethodFailedException if the expression called a method which failed
            @// throws NoSuchPropertyException if the expression referred to a nonexistent property
            @// throws InappropriateExpressionException if the expression can't be used in this context
            @// throws OgnlException if there is a pathological environmental problem
            
        </member>
        <member name="M:ognl.Ognl.setValue(System.Object,System.Collections.IDictionary,System.Object,System.Object)">
            
            Evaluates the given OGNL expression tree to insert a value into the object graph
            rooted at the given root object.  The default context is set for the given
            context and root via <CODE>addDefaultContext()</CODE>.
            
            @param tree the OGNL expression tree to evaluate, as returned by parseExpression()
            @param context the naming context for the evaluation
            @param root the root object for the OGNL expression
            @param value the value to insert into the object graph
            @// throws MethodFailedException if the expression called a method which failed
            @// throws NoSuchPropertyException if the expression referred to a nonexistent property
            @// throws InappropriateExpressionException if the expression can't be used in this context
            @// throws OgnlException if there is a pathological environmental problem
            
        </member>
        <member name="M:ognl.Ognl.setValue(System.String,System.Collections.IDictionary,System.Object,System.Object)">
            
            Evaluates the given OGNL expression to insert a value into the object graph
            rooted at the given root object given the context.
            
            @param expression the OGNL expression to be parsed
            @param root the root object for the OGNL expression
            @param context the naming context for the evaluation
            @param value the value to insert into the object graph
            @// throws MethodFailedException if the expression called a method which failed
            @// throws NoSuchPropertyException if the expression referred to a nonexistent property
            @// throws InappropriateExpressionException if the expression can't be used in this context
            @// throws OgnlException if there is a pathological environmental problem
            
        </member>
        <member name="M:ognl.Ognl.setValue(System.Object,System.Object,System.Object)">
            
            Evaluates the given OGNL expression tree to insert a value into the object graph
            rooted at the given root object.
            
            @param tree the OGNL expression tree to evaluate, as returned by parseExpression()
            @param root the root object for the OGNL expression
            @param value the value to insert into the object graph
            @// throws MethodFailedException if the expression called a method which failed
            @// throws NoSuchPropertyException if the expression referred to a nonexistent property
            @// throws InappropriateExpressionException if the expression can't be used in this context
            @// throws OgnlException if there is a pathological environmental problem
            
        </member>
        <member name="M:ognl.Ognl.setValue(System.String,System.Object,System.Object)">
            
            Convenience method that combines calls to <code> parseExpression </code> and
            <code> setValue</code>.
            
            @see #parseExpression(string)
            @see #setValue(object,object,object)
            @param expression the OGNL expression to be parsed
            @param root the root object for the OGNL expression
            @param value the value to insert into the object graph
            @// throws ExpressionSyntaxException if the expression is malformed
            @// throws MethodFailedException if the expression called a method which failed
            @// throws NoSuchPropertyException if the expression referred to a nonexistent property
            @// throws InappropriateExpressionException if the expression can't be used in this context
            @// throws OgnlException if there is a pathological environmental problem
            
        </member>
        <member name="M:ognl.Ognl.#ctor">
            You can't make one of these. 
        </member>
        <member name="M:ognl.ObjectArrayPool.SizePool.getSize">
            <summary>
            Returns the number of items in the pool
            </summary>
        </member>
        <member name="M:ognl.ObjectArrayPool.SizePool.getCreatedCount">
            <summary>
             Returns the number of items this pool has created since
             it's construction.
            </summary>
        </member>
        <member name="M:ognl.ObjectArrayPool.SizePool.getRecoveredCount">
            <summary>
             Returns the number of items this pool has recovered from
             the pool since its construction.
            </summary>
        </member>
        <member name="M:ognl.ObjectArrayPool.SizePool.getRecycledCount">
            <summary>
             Returns the number of items this pool has recycled since
             it's construction.
            </summary>
        </member>
        <member name="T:ognl.ASTNotIn">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.ASTLessEq">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:java.IndirectIndexedPropertyDescriptor">
            <summary>
            IndirectIndexedPropertyDescriptor µÄÕªÒªËµÃ÷¡£
            </summary>
        </member>
        <member name="T:ognl.ASTCtor">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="M:ognl.ASTCtor.setClassName(System.String)">
            Called from parser action. 
        </member>
        <member name="T:ognl.ASTAssign">
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
        </member>
        <member name="T:ognl.EnumerationPropertyAccessor">
            <summary>
            Implementation of PropertyAccessor that provides "property" reference to
            "nextElement" (aliases to "next" also) and "hasMoreElements" (also aliased
            to "hasNext").
            </summary>
            @author Luke Blanshard (blanshlu@netscape.net)
            @author Drew Davidson (drew@ognl.org)
            
        </member>
        <member name="M:ognl.EnumerationPropertyAccessor.getProperty(System.Collections.IDictionary,System.Object,System.Object)">
            <summary>
            When you call to "next" or "nextElement", 
            a MoveNext () will be call first to avoid Execption.
            So, DO NOT CALL THE "hasNext".
            </summary>
            <param name="context"></param>
            <param name="target"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
    </members>
</doc>
